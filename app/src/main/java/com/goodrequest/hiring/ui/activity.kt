package com.goodrequest.hiring.ui

import android.os.Bundle
import android.view.View.GONE
import android.view.View.VISIBLE
import androidx.activity.ComponentActivity
import androidx.lifecycle.AbstractSavedStateViewModelFactory
import androidx.lifecycle.SavedStateHandle
import androidx.lifecycle.ViewModel
import androidx.lifecycle.ViewModelLazy
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.goodrequest.hiring.PokemonApi
import com.goodrequest.hiring.R
import com.goodrequest.hiring.databinding.ActivityBinding
import com.google.android.material.snackbar.Snackbar

class PokemonActivity : ComponentActivity(), PokemonAdapterListener {
    val vm by viewModel { PokemonViewModel(it, PokemonApi) }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        vm.loadFirstPage()

        ActivityBinding.inflate(layoutInflater).run {
            setContentView(root)
            val adapter = PokemonAdapter(this@PokemonActivity)
            items.adapter = adapter
            refresh.setOnRefreshListener {
                vm.loadFirstPage()
            }

            retry.setOnClickListener {
                loading.visibility = VISIBLE
                vm.loadFirstPage()
            }

            vm.pokemons.observe(this@PokemonActivity) { result: Result<List<PokemonListItem>>? ->
                result?.fold(
                    onSuccess = { pokemons ->
                        loading.visibility = GONE
                        failure.visibility = GONE
                        adapter.show(pokemons)
                    },
                    onFailure = {
                        loading.visibility = GONE
                        failure.visibility = VISIBLE
                    }
                )
                refresh.isRefreshing = false
            }

            // Show snack bar in case of refresh error
            vm.refreshErrorOccurred.observe(this@PokemonActivity) { error: Boolean ->
                if (error) {
                    vm.refreshErrorOccurred.postValue(false)
                    Snackbar.make(root, getString(R.string.refresh_error), Snackbar.LENGTH_LONG)
                        .show()
                    refresh.isRefreshing = false
                }
            }

            items.addOnScrollListener(object : RecyclerView.OnScrollListener() {
                override fun onScrolled(recyclerView: RecyclerView, dx: Int, dy: Int) {
                    super.onScrolled(recyclerView, dx, dy)
                    val layoutManager = recyclerView.layoutManager as LinearLayoutManager
                    val lastVisibleItemPosition = layoutManager.findLastVisibleItemPosition()
                    val totalItemCount = layoutManager.itemCount

                    if (!vm.isLoadingNextPage() && !refresh.isRefreshing && lastVisibleItemPosition == totalItemCount - 1) {
                        vm.setLoadingNextPage(true)
                        vm.addLoadingItemToRecycler()
                        vm.loadNextPage()
                    }
                }
            })
        }
    }

    override fun onRetryButtonClick() {
        vm.loadNextPage()
    }
}

/**
 * Helper function that enables us to directly call constructor of our ViewModel but also
 * provides access to SavedStateHandle.
 * Shit like this is usually generated by Hilt
 */
inline fun <reified VM: ViewModel> ComponentActivity.viewModel(crossinline create: (SavedStateHandle) -> VM) =
    ViewModelLazy(
        viewModelClass = VM::class,
        storeProducer = { viewModelStore },
        factoryProducer = {
            object: AbstractSavedStateViewModelFactory(this@viewModel, null) {
                override fun <T : ViewModel> create(key: String, type: Class<T>, handle: SavedStateHandle): T =
                    create(handle) as T
            }
    })